openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: http://localhost:8080
  description: Generated server url
paths:
  /users/{id}:
    get:
      tags:
      - app-user-controller
      summary: Returns a app user found by id
      operationId: readAppUserById
      parameters:
      - name: id
        in: path
        description: app user's id to be found
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: There's no user with the given id
          content: {}
        "200":
          description: Returns the app user found by the given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppUser'
    put:
      tags:
      - app-user-controller
      summary: Updates an user with the new given info
      operationId: updateAppUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppUser'
        required: true
      responses:
        "404":
          description: There's no user with the given id
          content: {}
        "200":
          description: Returns the updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppUser'
    delete:
      tags:
      - app-user-controller
      summary: Deletes an app user
      operationId: deleteAppUser
      parameters:
      - name: id
        in: path
        description: app user's id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: There's no user with the given id
          content: {}
        "200":
          description: Returns the deleted app user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppUser'
  /reviews/{id}:
    get:
      tags:
      - review-controller
      operationId: readReview
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ReviewDTO'
    put:
      tags:
      - review-controller
      operationId: updateReview
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ReviewDTO'
    delete:
      tags:
      - review-controller
      operationId: deleteReview
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ReviewDTO'
  /books/{id}:
    get:
      tags:
      - book-controller
      summary: Asks for a book
      operationId: readBookById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: The book was not found
          content: {}
        "200":
          description: Returns the desired book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    put:
      tags:
      - book-controller
      summary: Asks for a book update
      operationId: updateBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        "404":
          description: The book was not found
          content: {}
        "200":
          description: Returns the updated book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    delete:
      tags:
      - book-controller
      summary: Asks for a book deletion
      operationId: deleteBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: The book was not found
          content: {}
        "200":
          description: Returns the deleted book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
  /users/:
    get:
      tags:
      - app-user-controller
      summary: Returns all app users
      operationId: readAppUsers
      parameters:
      - name: page
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "404":
          description: Not Found
        "200":
          description: Returns all app users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppUser'
    post:
      tags:
      - app-user-controller
      summary: Creates a app user
      operationId: createAppUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InAppUserDTO'
        required: true
      responses:
        "404":
          description: Not Found
        "201":
          description: Created app user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppUser'
  /books/{id}/reviews:
    get:
      tags:
      - book-controller
      summary: Asks for a book reviews
      operationId: readReviews_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "404":
          description: The book was not found
          content: {}
        "200":
          description: Returns the book's reviews
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
    post:
      tags:
      - book-controller
      summary: Creates a book review
      operationId: createReview
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InReviewDTO'
        required: true
      responses:
        "404":
          description: The book was not found
          content: {}
        "200":
          description: Returns the book's review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
  /books/:
    get:
      tags:
      - book-controller
      summary: Returns the all books
      operationId: readBooks
      parameters:
      - name: page
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "404":
          description: Not Found
        "200":
          description: Returns the all books
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
    post:
      tags:
      - book-controller
      summary: Creates a book
      operationId: createBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InBookDTO'
        required: true
      responses:
        "404":
          description: Not Found
        "200":
          description: Returns the created book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
  /users/{id}/reviews:
    get:
      tags:
      - app-user-controller
      summary: Returns all the reviews from an app user
      operationId: readReviewsById
      parameters:
      - name: id
        in: path
        description: app user's id for desired reviews
        required: true
        schema:
          type: integer
          format: int64
      - name: page
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "404":
          description: There's no user with the given id
          content: {}
        "200":
          description: Returns all the reviews from an app user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
  /reviews/:
    get:
      tags:
      - review-controller
      operationId: readReviews
      parameters:
      - name: page
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "404":
          description: Not Found
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageReviewDTO'
  /books/titles:
    get:
      tags:
      - book-controller
      summary: Returns the all books
      operationId: readBasicBooks
      parameters:
      - name: page
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/Pageable'
      responses:
        "404":
          description: Not Found
        "200":
          description: Returns the all books
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
components:
  schemas:
    AppUser:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        synopsis:
          type: string
        author:
          type: string
        publisher:
          type: string
        publishYear:
          type: string
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/Review'
    Review:
      type: object
      properties:
        id:
          type: integer
          format: int64
        appUser:
          $ref: '#/components/schemas/AppUser'
        book:
          $ref: '#/components/schemas/Book'
        comment:
          type: string
        rate:
          type: integer
          format: int32
    IdAppUserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
    IdBookDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
    ReviewDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        appUser:
          $ref: '#/components/schemas/IdAppUserDTO'
        book:
          $ref: '#/components/schemas/IdBookDTO'
        comment:
          type: string
        rate:
          type: integer
          format: int32
    InAppUserDTO:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
      description: app user body to create
    InReviewDTO:
      type: object
      properties:
        appUser:
          $ref: '#/components/schemas/IdAppUserDTO'
        book:
          $ref: '#/components/schemas/IdBookDTO'
        comment:
          type: string
        rate:
          type: integer
          format: int32
    BookReviewDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        appUser:
          $ref: '#/components/schemas/IdAppUserDTO'
        comment:
          type: string
        rate:
          type: integer
          format: int32
    InBookDTO:
      type: object
      properties:
        title:
          type: string
        synopsis:
          type: string
        author:
          type: string
        publisher:
          type: string
        publishYear:
          type: string
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/BookReviewDTO'
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    PageReviewDTO:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/ReviewDTO'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        first:
          type: boolean
        last:
          type: boolean
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        unpaged:
          type: boolean
        paged:
          type: boolean
        pageSize:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        unsorted:
          type: boolean
        sorted:
          type: boolean
